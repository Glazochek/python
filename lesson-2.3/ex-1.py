"""
Задание 1.
Реализуйте:
a) заполнение списка, оцените сложность в O-нотации.
   заполнение словаря, оцените сложность в O-нотации.
   сделайте аналитику, что заполняется быстрее и почему.
   сделайте замеры времени.
b) выполните со списком и словарем операции: изменения и удаления элемента.
   оцените сложности в O-нотации для операций
   получения и удаления по списку и словарю
   сделайте аналитику, какие операции быстрее и почему
   сделайте замеры времени.
ВНИМАНИЕ: в задании два пункта - а) и b)
НУЖНО выполнить оба пункта
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим
"""

def tm(operation):
    import time
    def fed(a):
        start = time.time()
        operation(a)
        end = time.time()
        print(f'операция заняла {end - start}')
    return fed


# a)

a = {}
b = []

@tm
def dict_tm(a):
    for i in range(1000000):
        a[i] = i # O(1)

@tm
def list_tm(b):
    for i in range(1000000):
        b.append(i) # O(1)


print(f'dict -')
dict_tm(a) # - 0.10172796249389648
print(f'list -')
list_tm(b) # - 0.08776640892028809
# лист заполняется быстрее, но словарь не сильно отстает
# у обоих приблезительно похожи результат из-за одинаковой сложности - константа

# b)

@tm
def get_dict_tm(a):
    for i in range(1000000):
        return a[i]  # O(1)
@tm
def get_list_tm(b):
    for i in range(1000000):
        return b[i]  # O(1)

print(f'dict -')
get_dict_tm(a) # 0.0
print(f'list -')
get_list_tm(b)# 0.0
# здесь ничья, оба справляются хорошо
# у обоих сложность константа

@tm
def del_dict_tm(a):
    for i in range(1000):
        del a[i] # O(1)
@tm
def del_list_tm(b):
    for i in range(1000):
        del b[i] # O(N)

print(f'dict -')
del_dict_tm(a) # 0.0009970664978027344
print(f'list -')
del_list_tm(b) # 0.685168981552124

# абсолютная победа словаря
# словарь заполняется быстрее потому что операция del у словаря - константа

