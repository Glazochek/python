"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.
Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы
сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
from statistics import median
from timeit import timeit

print(timeit('median([i for i in range(2*10+1)])', setup='from __main__ import median', number=100))
print(timeit('median([i for i in range(2*100+1)])', setup='from __main__ import median', number=100))
print(timeit('median([i for i in range(2*1000+1)])', setup='from __main__ import median', number=100))

# a = [i for i in range(2*10+1)]
# print(sorted(a)[len(a) // 2])

# 0.00010130000000000555
# 0.0006339999999999957
# 0.0058309


# 1) сортировка Шелла

# 0.0009495000000000024
# 0.0176767
# 0.2251952

# 2) без сортировок

# 0.0009166
# 0.0321658
# 2.741834

# 3) с помощью встроенных функций

# 0.00010130000000000555
# 0.0006339999999999957
# 0.0058309


# способ с встроенной функцией гораздо быстрее других
# способ с сортировкой Шелла показывает преимущество над способом без сортировки при больших массивах
# при меньших массивах они равны
